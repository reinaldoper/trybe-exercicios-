// updates complexos
// usando o método push
use('sales');
db.supplies.updateOne(
  { _id: 1 },
  {
    $push: {
      items: {
        "name": "notepad",
        "price":  35.29,
        "quantity": 2,
      },
    },
  },
  { upsert: true },
);

// adicionando vários elementos utilizando um array , tem que ter o $each
db.supplies.updateOne(
  {},
  {
    $push: {
      items: {
        $each: [
          {
            "name": "pens",
            "price": 56.12,
            "quantity": 5,
          },
          {
            "name": "envelopes",
            "price": 19.95,
            "quantity": 8,
          },
        ],
      },
    },
  },
  { upsert: true },
);


// O $push pode ser utilizado com múltiplos modificadores, fazendo várias operações ao mesmo tempo em um array.
use('sales');
db.supplies.updateOne(
  { _id: 1 },
  {
    $push: {
      items: {
        $each: [
          {
            "name" : "notepad",
            "price" : 35.29,
            "quantity" : 2,
          },
          {
            "name": "envelopes",
            "price": 19.95,
            "quantity": 8,
          },
          {
            "name": "pens",
            "price": 56.12,
            "quantity": 5,
          },
        ],
        $sort: { "quantity": -1 },
        /* $slice: 3, */
      },
    },
  },
  { upsert: true },
);

// Uma maneira simples de remover o primeiro ou o último elemento de um array é utilizar o operador $pop.
// Passando o valor -1 ao operador $pop você removerá o primeiro elemento. Já ao passar o valor 1, você removerá o último elemento do array. Simples, não é?!

use('sales');
db.supplies.insertOne(
{
  _id: 2,
  items: [
    {
      "name" : "pencil",
      "price" : 5.29,
      "quantity" : 2,
    },
    {
      "name": "envelopes",
      "price": 19.95,
      "quantity": 8,
    },
    {
      "name": "backpack",
      "price": 80.12,
      "quantity": 1,
    },
    {
      "name": "pens",
      "price": 56.12,
      "quantity": 5,
    },
  ],
})
db.supplies.updateOne({ _id: 1 }, { $pop: { items: 1 } });

// O operador $pull remove de um array existente todos os elementos,
// com um ou mais valores que atendam à condição especificada.

use('sales');
db.supplies.updateMany(
  {},
  {
    $pull: {
      items: {
        name: { $in: ["pens", "envelopes"] },
      },
    },
  },
);


db.supplies.find({});

// Removendo todos os itens que atendem a uma condição diretamente no $pull
use(('sales'));
db.supplies.updateOne(
  { _id: 3 },
  {
    $pull: {
      "votes": { $gte: 6},
    },
  },
);

use('sales');
db.supplies.insertOne({ _id: 3, votes: [3, 5, 6, 7, 7, 8] });


use('sales');
db.survey.insert({
  _id: 1,
  results: [
    { item: "A", score: 5 },
    { item: "B", score: 8, comment: "Strongly agree" },
  ],
},
{
  _id: 2,
  results: [
    { item: "C", score: 8, comment: "Strongly agree" },
    { item: "B", score: 4 },
  ],
});

// Com a operação abaixo, você consegue remover do array results todos os elementos que contenham o campo score igual a 8 e o campo item igual a “B”.
// Ou seja, o documento deve atender a ambas as condições.
use('sales');
db.supplies.insertOne({
  _id: 4,
  item: "polarizing_filter",
  tags: ["electronics", "camera"],
});


db.survey.updateMany(
  {},
  {
    $pull: {
      results: { score: 8 , item: "B" },
    },
  },
);

// O operador $addToSet é utilizado quando você precisa
// garantir que os valores de um array não sejam duplicados.
// A operação abaixo adiciona o elemento “accessories” 
// ao array tags desde que “accessories” não exista no array:
use('sales');
db.supplies.updateOne(
  { _id: 4 },
  { $addToSet: { tags: "accessories" } },
);

// A operação abaixo utiliza o operador $addToSet e o modificador
// $each para adicionar alguns elementos a mais no array tags:
use('sales');
db.supplies.updateOne(
  { _id: 4 },
  { $addToSet: { tags: {$each: ["carros", "camera", "electronics", "accessories"],} }, },
);

use('sales');
db.supplies.find({});